//@version=5
strategy("NOI Strategy", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

ma(source, length, type) =>
    type == "SMA" ? ta.sma(source, length) :
     type == "EMA" ? ta.ema(source, length) :
     type == "SMMA (RMA)" ? ta.rma(source, length) :
     type == "WMA" ? ta.wma(source, length) :
     type == "VWMA" ? ta.vwma(source, length) :
     na

// =================== Input Parameters ===================
// Strategy Parameters

// ---------------------EMA Ribbon Parameters---------------------
show_ema_ribbon   = input(true   , "MA Ribbon", inline="EMA Ribbon", group="MA")

show_ma1   = input(true   , "MA 1", inline="MA #1", group="MA")
ma1_type   = input.string("SMA"  , ""     , inline="MA #1", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA")
ma1_source = input(close  , ""     , inline="MA #1", group="MA")
ma1_length = input.int(20     , ""     , inline="MA #1", minval=1, group="MA")
ma1_color  = input(#f6c309, ""     , inline="MA #1", group="MA")
ma1 = ma(ma1_source, ma1_length, ma1_type)
plot(show_ma1 ? ma1 : na, color = ma1_color, title="MA №1")

show_ma2   = input(true   , "MA 2", inline="MA #2", group="MA")
ma2_type   = input.string("SMA"  , ""     , inline="MA #2", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA")
ma2_source = input(close  , ""     , inline="MA #2", group="MA")
ma2_length = input.int(50     , ""     , inline="MA #2", minval=1, group="MA")
ma2_color  = input(#fb9800, ""     , inline="MA #2", group="MA")
ma2 = ma(ma2_source, ma2_length, ma2_type)
plot(show_ma2 ? ma2 : na, color = ma2_color, title="MA №2")

show_ma3   = input(true   , "MA 3", inline="MA #3", group="MA")
ma3_type   = input.string("SMA"  , ""     , inline="MA #3", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA")
ma3_source = input(close  , ""     , inline="MA #3", group="MA")
ma3_length = input.int(100    , ""     , inline="MA #3", minval=1, group="MA")
ma3_color  = input(#fb6500, ""     , inline="MA #3", group="MA")
ma3 = ma(ma3_source, ma3_length, ma3_type)
plot(show_ma3 ? ma3 : na, color = ma3_color, title="MA №3")

show_ma4   = input(true   , "MA 4", inline="MA #4", group="MA")
ma4_type   = input.string("SMA"  , ""     , inline="MA #4", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA")
ma4_source = input(close  , ""     , inline="MA #4", group="MA")
ma4_length = input.int(200    , ""     , inline="MA #4", minval=1, group="MA")
ma4_color  = input(#f60c0c, ""     , inline="MA #4", group="MA")
ma4 = ma(ma4_source, ma4_length, ma4_type)
plot(show_ma4 ? ma4 : na, color = ma4_color, title="MA №4")

ma_timeframe = input.timeframe("4H", "Timeframe", group="MA")
flag_ma_wait_for_timeframe_close = input.bool(true, "Wait for Timeframe Close", group="MA")

// -----------------Month/Week Open Parameters--------------------
show_Month_Week_Open = input.bool(true, "Month/Week Open", group="Month/Week Open")
useMonthly = input.bool(true, "Use Monthly Level", inline="Month Open", group="Month/Week Open")
Month_color = input(#00ff00, "Month Open Color", inline="Month Open", group="Month/Week Open")
useWeekly = input.bool(false, "Use Weekly Level", inline="Week Open", group="Month/Week Open")
Week_color = input(#0000ff, "Week Open Color", inline="Week Open", group="Month/Week Open")

show_month_week_ema1   = input(true   , "MA 1", inline="MW EMA #1", group="Month/Week Open")
month_week_ema1_type   = input.string("SMA"  , ""     , inline="MW EMA #1", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Month/Week Open")
month_week_ema1_source = input(close  , ""     , inline="MW EMA #1", group="Month/Week Open")
month_week_ema1_length = input.int(20     , ""     , inline="MW EMA #1", minval=1, group="Month/Week Open")
month_week_ema1_color  = input(#f6c309, ""     , inline="MW EMA #1", group="Month/Week Open")
month_week_ema1 = ma(month_week_ema1_source, month_week_ema1_length, month_week_ema1_type)
plot(show_month_week_ema1 ? month_week_ema1 : na, color = month_week_ema1_color, title="Month/Week EMA 1")


// ----------------Signal Pause Period After a New Trend----------------
show_signal_pause_period = input.bool(false, "Signal Pause Period After a New Trend", group="Signal Pause Period After a New Trend")
signal_pause_period_timeframe = input.timeframe("12H", "Timeframe", group="Signal Pause Period After a New Trend")


// ----------------Non-Alert Window----------------
show_non_alert_window = input.bool(false, "Non-Alert Window", group="Non-Alert Window")
non_alert_window1_days   = input.string("Mon"  , "1"     , inline="Non-Alert Window 1", options=["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], group="Non-Alert Window")
non_alert_window1_time_from = input.string("09:00", "", options=["00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"], inline="Non-Alert Window 1", group="Non-Alert Window")
non_alert_window1_time_to = input.string("15:00", "", options=["00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"], inline="Non-Alert Window 1", group="Non-Alert Window")
non_alert_window2_days = input.string("Wed", "2", options=["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], inline="Non-Alert Window 2", group="Non-Alert Window")
non_alert_window2_time_from = input.string("09:00", "", options=["00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"], inline="Non-Alert Window 2", group="Non-Alert Window")
non_alert_window2_time_to = input.string("15:00", "", options=["00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"], inline="Non-Alert Window 2", group="Non-Alert Window")

// plot(dayofweek, title="Day of Week", display=display.datawindow)
// ----------------Profit Target and Stop Loss----------------
profit_target = input.float(2.0, "Profit Target %", minval=0.0, group="Profit Target and Stop Loss") / 100
stop_loss = input.float(1.0, "Stop Loss %", minval=0.0, group="Profit Target and Stop Loss") / 100

now_day = dayofweek

// -------------------------ENTRY CHECK POINT (ECP)-------------------------
// MACD Parameters
show_macd1 = input.bool(true, "MACD 1", group="MACD 1")
macd1_fast = input.int(12, "MACD 1 Fast Length", group="MACD 1")
macd1_slow = input.int(26, "MACD 1 Slow Length", group="MACD 1")
macd1_source = input(close, "MACD 1 Source", group="MACD 1")
macd1_signal = input.int(9, "MACD 1 Signal Length", group="MACD 1")
macd1_oscillator_ma_type = input.string("EMA", "MACD 1 Oscillator MA Type", group="MACD 1")
macd1_signal_ma_type = input.string("EMA", "MACD 1 Signal MA Type", group="MACD 1")
macd1_tf = input.timeframe("60", "MACD 1 Timeframe", group="MACD 1")
macd1_wait_for_timeframe_close = input.bool(true, "Wait for Timeframe Close", group="MACD 1")

show_macd2 = input.bool(false, "MACD 2", group="MACD 2")
macd2_fast = input.int(12, "MACD 2 Fast Length", group="MACD 2")
macd2_slow = input.int(26, "MACD 2 Slow Length", group="MACD 2")
macd2_source = input(close, "MACD 2 Source", group="MACD 2")
macd2_signal = input.int(9, "MACD 2 Signal Length", group="MACD 2")
macd2_oscillator_ma_type = input.string("EMA", "MACD 2 Oscillator MA Type", group="MACD 2")
macd2_signal_ma_type = input.string("EMA", "MACD 2 Signal MA Type", group="MACD 2")
macd2_tf = input.timeframe("120", "MACD 2 Timeframe", group="MACD 2")
macd2_wait_for_timeframe_close = input.bool(true, "Wait for Timeframe Close", group="MACD 2")

show_macd3 = input.bool(false, "MACD 3", group="MACD 3")
macd3_fast = input.int(12, "MACD 3 Fast Length", group="MACD 3")
macd3_slow = input.int(26, "MACD 3 Slow Length", group="MACD 3")
macd3_source = input(close, "MACD 3 Source", group="MACD 3")
macd3_signal = input.int(9, "MACD 3 Signal Length", group="MACD 3")
macd3_oscillator_ma_type = input.string("EMA", "MACD 3 Oscillator MA Type", group="MACD 3")
macd3_signal_ma_type = input.string("EMA", "MACD 3 Signal MA Type", group="MACD 3")
macd3_tf = input.timeframe("240", "MACD 3 Timeframe", group="MACD 3")
macd3_wait_for_timeframe_close = input.bool(true, "Wait for Timeframe Close", group="MACD 3")

// ----------------Position Sizing for Additional Signals----------------
enable_multiple_entries = input.bool(true, "Enable Multiple Entries", group="Position Sizing")
second_entry_pct = input.float(10.0, "2nd Entry Price Change %", minval=0.0, group="Position Sizing")
third_entry_pct = input.float(20.0, "3rd Entry Price Change %", minval=0.0, group="Position Sizing")
fourth_entry_pct = input.float(30.0, "4th Entry Price Change %", minval=0.0, group="Position Sizing")

// =================== Calculations ===================
// Price Levels
priceweek = request.security(syminfo.tickerid, 'W', open[0])
pricemonth = request.security(syminfo.tickerid, 'M', open[0])

// MACD Calculations
[macd1, signal1, hist1] = request.security(syminfo.tickerid, macd1_tf, ta.macd(macd1_source, macd1_fast, macd1_slow, macd1_signal))
[macd2, signal2, hist2] = request.security(syminfo.tickerid, macd2_tf, ta.macd(macd2_source, macd2_fast, macd2_slow, macd2_signal))
[macd3, signal3, hist3] = request.security(syminfo.tickerid, macd3_tf, ta.macd(macd3_source, macd3_fast, macd3_slow, macd3_signal))
// =================== Signal Logic ===================
var int globalSignal = 0
var bool longSignal = false
var bool shortSignal = false
var bool longSignal1 = false
var bool shortSignal1 = false
var bool longSignal2 = false
var bool shortSignal2 = false
var bool longSignal3 = false
var bool shortSignal3 = false

// EMA Cross Signals
emaLongSignal = show_ema_ribbon and (ta.crossover(ma1, ma2) or ta.crossover(ma1, ma3) or ta.crossover(ma1, ma4))
emaShortSignal = show_ema_ribbon and (ta.crossunder(ma1, ma2) or ta.crossunder(ma1, ma3) or ta.crossunder(ma1, ma4))

// Month/Week Open Signals
weeklyShortSignal = show_Month_Week_Open and useWeekly and ta.crossunder(month_week_ema1, priceweek)
monthlyShortSignal = show_Month_Week_Open and useMonthly and ta.crossunder(month_week_ema1, pricemonth)

weeklyLongSignal = show_Month_Week_Open and useWeekly and ta.crossover(month_week_ema1, priceweek)
monthlyLongSignal = show_Month_Week_Open and useMonthly and ta.crossover(month_week_ema1, pricemonth)

if (emaLongSignal or monthlyLongSignal or weeklyLongSignal)
    globalSignal := 1
else if (emaShortSignal or monthlyShortSignal or weeklyShortSignal)
    globalSignal := -1
else
    globalSignal := globalSignal[1]

// ----------------ENTRY CHECK POINT (ECP)----------------
if (show_macd1)
    longSignal1 := (hist1 < 0 and hist1[1] < hist1 and hist1[2] > hist1[1]) or ta.crossover(signal1, 0) or ta.crossover(macd1, signal1)
    shortSignal1 := (hist1 > 0 and hist1[1] > hist1 and hist1[2] < hist1[1]) or ta.crossunder(signal1, 0) or ta.crossunder(macd1, signal1)

    if (longSignal1 == false)
        longSignal1 := longSignal1[1]
    else if (shortSignal1 == false)
        shortSignal1 := shortSignal1[1]

if (show_macd2)
    longSignal2 := (hist2 < 0 and hist2[1] < hist2 and hist2[2] > hist2[1]) or ta.crossover(signal2, 0) or ta.crossover(macd2, signal2)
    shortSignal2 := (hist2 > 0 and hist2[1] > hist2 and hist2[2] < hist2[1]) or ta.crossunder(signal2, 0) or ta.crossunder(macd2, signal2)

    if (longSignal2 == false)
        longSignal2 := longSignal2[1]
    else if (shortSignal2 == false)
        shortSignal2 := shortSignal2[1]

if (show_macd3)
    longSignal3 := (hist3 < 0 and hist3[1] < hist3 and hist3[2] > hist3[1]) or ta.crossover(signal3, 0) or ta.crossover(macd3, signal3)
    shortSignal3 := (hist3 > 0 and hist3[1] > hist3 and hist3[2] < hist3[1]) or ta.crossunder(signal3, 0) or ta.crossunder(macd3, signal3)

    if (longSignal3 == false)
        longSignal3 := longSignal3[1]
    else if (shortSignal3 == false)
        shortSignal3 := shortSignal3[1]


// ----------------COMBINED SIGNALS----------------
if globalSignal == 1 and (show_macd1 == false or (show_macd1 and longSignal1)) and (show_macd2 == false or (show_macd2 and longSignal2)) and (show_macd3 == false or (show_macd3 and longSignal3))
    longSignal := true
    longSignal1 := false
    longSignal2 := false
    longSignal3 := false
else
    longSignal := false

if globalSignal == -1 and (show_macd1 == false or (show_macd1 and shortSignal1)) and (show_macd2 == false or (show_macd2 and shortSignal2)) and (show_macd3 == false or (show_macd3 and shortSignal3))
    shortSignal := true
    shortSignal1 := false
    shortSignal2 := false
    shortSignal3 := false
else
    shortSignal := false


// =================== Strategy Logic ===================
var float entry_price = na
var int trades_today = 0
var int position_count = 0

// Reset daily trade counter
if ta.change(time("D"))
    trades_today := 0

// Calculate price changes for multiple entries
price_change_pct = close > entry_price ? ((close - entry_price) / entry_price) * 100 : 
                   close < entry_price ? ((entry_price - close) / entry_price) * 100 : 0

// Entry Conditions
long_condition = longSignal
short_condition = shortSignal

// Multiple Entry Logic
can_add_position = enable_multiple_entries and position_count < 4
second_entry = position_count == 1 and price_change_pct >= second_entry_pct
third_entry = position_count == 2 and price_change_pct >= third_entry_pct
fourth_entry = position_count == 3 and price_change_pct >= fourth_entry_pct

// Position Management
if (strategy.position_size == 0)
    position_count := 0
    
// Entry Orders
if (long_condition and position_count == 0)
    strategy.entry("Long", strategy.long, comment="Long Entry")
    entry_price := close
    trades_today := trades_today + 1
    position_count := 1

if (short_condition)
    strategy.entry("Short", strategy.short, comment="Short Entry")
    entry_price := close
    trades_today := trades_today + 1
    position_count := 1

// Additional Entry Orders
if (can_add_position and strategy.position_size > 0)
    if (second_entry)
        strategy.entry("Long Add 2", strategy.long, comment="Long Add 2")
        position_count := 2
    if (third_entry)
        strategy.entry("Long Add 3", strategy.long, comment="Long Add 3")
        position_count := 3
    if (fourth_entry)
        strategy.entry("Long Add 4", strategy.long, comment="Long Add 4")
        position_count := 4

if (can_add_position and strategy.position_size < 0)
    if (second_entry)
        strategy.entry("Short Add 2", strategy.short, comment="Short Add 2")
        position_count := 2
    if (third_entry)
        strategy.entry("Short Add 3", strategy.short, comment="Short Add 3")
        position_count := 3
    if (fourth_entry)
        strategy.entry("Short Add 4", strategy.short, comment="Short Add 4")
        position_count := 4

// Exit Orders
if (strategy.position_size > 0)
    strategy.exit("Long Exit", "Long", profit=profit_target, loss=stop_loss, comment="Long Exit")
    strategy.exit("Long Exit 2", "Long Add 2", profit=profit_target, loss=stop_loss, comment="Long Exit 2")
    strategy.exit("Long Exit 3", "Long Add 3", profit=profit_target, loss=stop_loss, comment="Long Exit 3")
    strategy.exit("Long Exit 4", "Long Add 4", profit=profit_target, loss=stop_loss, comment="Long Exit 4")
    
if (strategy.position_size < 0)
    strategy.exit("Short Exit", "Short", profit=profit_target, loss=stop_loss, comment="Short Exit")
    strategy.exit("Short Exit 2", "Short Add 2", profit=profit_target, loss=stop_loss, comment="Short Exit 2")
    strategy.exit("Short Exit 3", "Short Add 3", profit=profit_target, loss=stop_loss, comment="Short Exit 3")
    strategy.exit("Short Exit 4", "Short Add 4", profit=profit_target, loss=stop_loss, comment="Short Exit 4")

// =================== Plotting ===================

// Plot Price Levels
plot(show_Month_Week_Open and useWeekly ? priceweek : na, "Weekly Open", color=color.yellow, linewidth=2)
plot(show_Month_Week_Open and useMonthly ? pricemonth : na, "Monthly Open", color=color.orange, linewidth=2)

// Plot Signals
plotshape(longSignal, "Long Signal", style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)
plotshape(shortSignal, "Short Signal", style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small)

// Additional Plot for Strategy
plot(entry_price, "Entry Price", color=color.white, style=plot.style_circles)

// =================== Alert ===================


// =================== MACD Plots in Separate Windows ===================
// MACD1 Panel
// plot(show_macd1 ? macd1 : na, "MACD 1", color=color.blue, linewidth=2, display=display.pane)
// plot(show_macd1 ? signal1 : na, "Signal 1", color=color.orange, linewidth=2, display=display.pane)
// plot(show_macd1 ? hist1 : na, "Histogram 1", color=hist1 >= 0 ? color.green : color.red, style=plot.style_histogram, linewidth=4, display=display.pane)
// hline(0, "Zero Line 1", color=color.gray, linestyle=hline.style_dotted, display=display.pane)

// MACD2 Panel
// plot(show_macd2 ? macd2 : na, "MACD 2", color=color.blue, linewidth=2, display=display.pane)
// plot(show_macd2 ? signal2 : na, "Signal 2", color=color.orange, linewidth=2, display=display.pane)
// plot(show_macd2 ? hist2 : na, "Histogram 2", color=hist2 >= 0 ? color.green : color.red, style=plot.style_histogram, linewidth=4, display=display.pane)
// hline(0, "Zero Line 2", color=color.gray, linestyle=hline.style_dotted, display=display.pane)

// MACD3 Panel
// plot(show_macd3 ? macd3 : na, "MACD 3", color=color.blue, linewidth=2, display=display.pane)
// plot(show_macd3 ? signal3 : na, "Signal 3", color=color.orange, linewidth=2, display=display.pane)
// plot(show_macd3 ? hist3 : na, "Histogram 3", color=hist3 >= 0 ? color.green : color.red, style=plot.style_histogram, linewidth=4, display=display.pane)
// hline(0, "Zero Line 3", color=color.gray, linestyle=hline.style_dotted, display=display.pane)
