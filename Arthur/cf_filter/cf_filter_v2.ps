// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © GoemonYae

//@version=5
indicator("Christiano-Fitzgerald & Baxter-King filters", 'CF|BK filters', overlay=false, max_bars_back=1000)

// The Christiano-Fitzgerald random walk filter is a band pass filter that was built on the same principles as the Baxter and King (BK) filter.
// These filters formulate the de-trending and smoothing problem in the frequency domain. Should we have continuous and/or infinitely long time series
// the frequency filtering could be an exact procedure. However the granularity and finiteness of real life time series do not allow for perfect frequency filtering.
// Both the BK and CF filters approximate the ideal infinite band pass filter. The Baxter and King version is a symmetric approximation,
// with no phase shifts in the resulting filtered series. But symmetry and phase correctness comes at the expense of series trimming.
// Depending on the trim factor a certain number of values at the end of the series cannot be calculated. There is a trade-off between the trimming factor and
// the precision with which the optimal filter can be approximated. On the other hand the Christiano-Fitzgerald random walk filter uses the whole time series
// for the calculation of each filtered data point. The advantage of the CF filter is that it is designed to work well on a larger class of time series than the BK filter,
// converges in the long run to the optimal filter, and in real time applications outperforms the BK filter. For details see Christiano-Fitzgerald [1999].
//
// Conclusion of study:
// The use of a Hodrick-Prescott (HP) filter is recommend if the early, clear and steady turning point signals are a priority.
// The use of the CF filter is recommended when priority is given to minimizing cumulative revisions.
// With the CF filter a noisy, oscillating signal arises in real time applications, but in return the initial estimates of a cyclical value are the closest to the final long term cycle value.
//
// source: "Cycle Extraction: A Comparison of the Phase- Average Trend Method, the Hodrick-Prescott and Christiano-Fitzgerald Filters" by Ronny Nilsson, Gyorgy Gyomai (2011)
// https://dx.doi.org/10.1787/5kg9srt7f8g0-en

// TODO add Baxter-King information


// ----------------------------------------------------------------------------------------------------------------------------- //
// ------[   Christiano-Fitzgerald filter   ]------
// ----------------------------------------------------------------------------------------------------------------------------- //

// Function to compute Bj coefficients
compute_Bj(int nobs, float a, float b) =>
    var float[] Bj = array.new_float(nobs + 1)
    array.set(Bj, 0, (b - a) / math.pi)  // B0
    for i = 1 to nobs
        array.set(Bj, i, (math.sin(b * i) - math.sin(a * i)) / (math.pi * i))
    Bj

// Function to adjust for drift // TODO this linear correction is too simplistic, let's skip it for now (always use drift=false)!!!
drift_adjusted(series float x, int idx, int nobs, bool drift) =>
    drift ? x - (x[0] - x[nobs - 1]) * idx / (nobs - 1) : x


// @function                Calculates the Christiano-Fitzgerald asymmetric, random walk band-pass filter.
//                          Adapted from https://github.com/statsmodels/statsmodels/blob/main/statsmodels/tsa/filters/cf_filter.py
// @param enable_filter     {bool} Whether this function should be enabled, otherwise returns `na` for both components
// @param x                 {float} Input series to be transformed by the filter
// @param low_val           {float} Minimum period of oscillations. Features below low periodicity are filtered out. Default suggestion is is 6 for quarterly data, giving a 1.5 year periodicity.
// @param high_val          {float} Maximum period of oscillations. Features above high periodicity are filtered out. Default suggestion is is 32 for quarterly data, giving an 8 year periodicity.
// @param drift             {bool} Whether or not to remove a trend from the data. The trend is estimated as np.arange(nobs)*(x[-1] - x[0])/(len(x)-1).
// @param num_observations  {int} How much of recent observations of `x` should be taken into account. Default is 400, maximum for PineScript is 100k.
// @returns [cycle, trend]  {float, float} cycle: The features of x between the periodicities low and high; trend: The trend in the data with the cycles removed.
cf_filter(bool enable_filter, series float x, float low_val = 6, float high_val = 32, bool drift = false, int num_observations = 400) =>
    var float cycle = na
    var float trend = na

    if enable_filter
        var float a = na
        var float b = na
        int nobs = math.min(num_observations, bar_index + 1)  // Include current bar

        // Compute Bj coefficients once
        var float[] Bj = na
        if barstate.isfirst or (low_val != low_val[1]) or (high_val != high_val[1])
            a := 2 * math.pi / high_val
            b := 2 * math.pi / low_val
            Bj := array.new<float>(nobs + 1)
            for i = 1 to nobs
                array.set(Bj, i, (math.sin(b * i) - math.sin(a * i)) / (math.pi * i))
            float B0 = (b - a) / math.pi
            array.set(Bj, 0, B0)  // put B0 at beginning of array

        // Filter calculation
        float y = 0.0
        for i = 0 to nobs - 1
            float adj_val = drift_adjusted(x[i], i, nobs, drift)
            float B = -0.5 * array.get(Bj, 0)
            for j = 1 to (nobs - i - 2)
                if j < array.size(Bj) and (nobs - i - 2) > 0
                    B := B - array.get(Bj, j)
            float A = -array.get(Bj, 0)
            for j = 1 to (nobs - i - 2)
                if j < array.size(Bj) and (nobs - i - 2) > 0
                    A := A - array.get(Bj, j)
            for j = 1 to math.min(i, array.size(Bj) - 1)  // Adjusted loop boundary
                A := A - array.get(Bj, j)
            A := A - B

            float sum1 = array.get(Bj, 0) * adj_val
            for j = 1 to (nobs - i - 2)
                if j < array.size(Bj) and (i + 1 + j) < nobs and (nobs - i - 2) > 0
                    sum1 := sum1 + array.get(Bj, j) * drift_adjusted(x[i + 1 + j], i + 1 + j, nobs, drift)
            float sum2 = B * drift_adjusted(x[nobs - 1], nobs - 1, nobs, drift)
            for j = 1 to math.min(i, array.size(Bj) - 1)  // Adjusted loop boundary
                if (i - j) >= 0
                    sum2 := sum2 + array.get(Bj, j) * drift_adjusted(x[i - j], i - j, nobs, drift)
            y := sum1 + sum2 + A * drift_adjusted(x[0], 0, nobs, drift)

        cycle := y
        trend := drift_adjusted(x[nobs - 1], nobs - 1, nobs, drift) - y
    
    [cycle, trend]


// ----------------------------------------------------------------------------------------------------------------------------- //
// ------[   Baxter-King filter   ]------
// ----------------------------------------------------------------------------------------------------------------------------- //

scope = barstate.isconfirmed and bar_index > last_bar_index - 5

// @function                Calculates the Baxter-King band-pass filter.
//                          Adapted from https://github.com/statsmodels/statsmodels/blob/main/statsmodels/tsa/filters/bk_filter.py
//                          Note that originally, this is a non-causal filter and uses a FFT-convolution what we have adjusted here.
// @param enable_filter     {bool} Whether this function should be enabled, otherwise returns `na`
// @param x                 {float} Input series to be transformed by the filter
// @param low_val           {float} Minimum period of oscillations. Features below low periodicity are filtered out. Default suggestion is 6 for quarterly data and 1.5 for annual periodicity.
// @param high_val          {float} Maximum period of oscillations. Features above high periodicity are filtered out. Default suggestion is 32 for quarterly data andn 8 for annual periodicity.
// @param K                 {int} Lead-lag length of the filter. Default suggested truncation is 12 for quarterly data and 8 for annual data periodicity.
// @returns cycle           {float} The cyclical component as result of the filter
bk_filter(bool enable_filter, series float x, float low_val = 6, float high_val = 32, int K = 12) =>
    float cycle = 0
    var float omega_1 = na
    var float omega_2 = na
    if enable_filter
        // Compute bweights once
        var float weight = na
        var float weight_sum = 0
        var float[] weights = array.new<float>(2 * K + 1)
        if barstate.isfirst or (low_val != low_val[1]) or (high_val != high_val[1]) or (K != K[1])
            // The weights are designed to have a specific frequency response, passing through frequencies between low_val and high_val while attenuating others.
            // Convert from frequency to periodicity
            omega_1 := 2 * math.pi / high_val
            omega_2 := 2 * math.pi / low_val

            // The weights are symmetric around the center of the kernel (which corresponds to zero lag)
            for j = 1 to K 
                weight := (math.sin(omega_2 * j) - math.sin(omega_1 * j)) / (math.pi * j)
                weights.set(K + j, weight)
                weights.set(K - j, weight)
            weights.set(K, (omega_2 - omega_1) / math.pi)  // weight at zero frequency

            // Let weights sum to zero, ensuring that the filtered signal does not have a DC bias.
            weights_avg = weights.avg()
            for i = 0 to weights.size() - 1
                weights.set(i, weights.get(i) - weights_avg)

        // Compute the weights and apply the filter
        // TODO does not work well -- becaus we made the filter causal by only looking at at the historical part of the weights kernel.
        // TODO `fftconvolve` of original is not implemented here, for now only a simple solution of y[i] * weight[K-i]
        cycle := 0.0
        weight_sum := 0.0
        for i = 0 to math.min(K, bar_index)  // Only use past and current data points
            cycle += x[i] * weights.get(K - i)
            weight_sum += weights.get(K - i)
            // if scope
            //     if i == 0
            //         log.warning('\ni={0}, x={1}, weight={2}, cycle={3}', i, x[i], weights.get(K - i), cycle)
            //     else
            //         log.info('\ni={0}, x={1}, weight={2}, cycle={3}', i, x[i], weights.get(K - i), cycle)

        // Normalize the cycle component
        if weight_sum != 0
            cycle := cycle / weight_sum - x
    else
        cycle := na
    
    cycle

// ----------------------------------------------------------------------------------------------------------------------------- //
// ------[  Application   ]-----
// ----------------------------------------------------------------------------------------------------------------------------- //

const string group_bk = 'Baxter-King (BK) filter'
bk_enable          = input.bool(  true,     'Enable Baxter-King filter',                                    group=group_bk)
bk_source          = input.source(close,    'Source',                                                       group=group_bk)
bk_min_period      = input.int(   6,        'Minimum period oscillations', minval=2,                        group=group_bk)
bk_max_period      = input.int(   32,       'Maximum period oscillations', minval=3,                        group=group_bk)
bk_k               = input.int(   15,       'Lead-lag length (K)',                                          group=group_bk)

const string group_cf = 'Christiano-Fitzgerald (CF) filter'
cf_enable          = input.bool(  false,     'Enable Christiano-Fitzgerald filter',                         group=group_cf)
cf_source          = input.source(close,    'Source',                                                       group=group_cf)
cf_min_period      = input.int(   6,        'Minimum period oscillations', minval=2,                        group=group_cf)
cf_max_period      = input.int(   32,       'Maximum period oscillations', minval=3,                        group=group_cf)
cf_correct_drift   = input.bool(  false,    'Correct for drift',                                            group=group_cf)
cf_lookback_window = input.int(   400,      'Lookback window for calculation', minval=100, maxval=100000,   group=group_cf)

[cf_cycle, cf_trend] = cf_filter(cf_enable, cf_source, cf_min_period, cf_max_period, cf_correct_drift, cf_lookback_window)
bk_cycle             = bk_filter(bk_enable, bk_source, bk_min_period, bk_max_period, bk_k)

// Plotting the results
p_zero = plot(0, 'Zero', color.rgb(120, 123, 134, 30), 2)

p_cf_cycle = plot(cf_cycle, 'Christiano-Fitzgerald Cycle', color.red,  2, force_overlay=false)
p_cf_trend = plot(cf_trend, 'Christiano-Fitzgerald Trend', color.blue, 2, force_overlay=true)

// if scope
//     log.error('\n{0}. BK cycle: {1}', bar_index, bk_cycle)

p_bk_cycle = plot(bk_cycle, 'Baxter-King Cycle', color.rgb(85, 0, 255),  2, force_overlay=false)

fill(p_zero, p_cf_cycle, color.rgb(208, 98, 25, 80),  'CF fill')
fill(p_zero, p_bk_cycle, color.rgb(211, 16, 225, 80), 'BK fill')